void Lefttree(Node* root, vector<int> &ans){

    if(root==NULL){

        return ;

    }

    if(root->left!=NULL){

        ans.push_back(root->data);

        Lefttree(root->left, ans);

    }else if(root->right!=NULL){

        ans.push_back(root->data);

        Lefttree(root->right, ans);

    }

}

void leaf(Node*root, vector<int> &ans){

    if(root==NULL){

        return ;

    }

    leaf(root->left, ans);

    if(root->left==NULL && root->right==NULL)

        ans.push_back(root->data);

    

    leaf(root->right, ans);

}

void Righttree(Node*root, vector<int> &ans){

    if(root==NULL) return;

    if(root->right!=NULL){

        Righttree(root->right ,ans);

        ans.push_back(root->data);

    }else if(root->left!=NULL){

        Righttree(root->left, ans);

        ans.push_back(root->data);

    }

    

}

    vector <int> boundary(Node *root)

    {

         vector<int> ans;

         if( root->left==NULL && root->right==NULL){

             ans.push_back(root->data);

             return ans;

         }

         ans.push_back(root->data);

         Lefttree(root->left, ans);

         leaf(root, ans);

         Righttree(root->right, ans);

         return ans;

    }
